{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const cpr = require('cpr');\r\nconst rimraf = require('rimraf');\r\nconst mv = require('mv');\r\nconst makeDir = require('make-dir');\r\n\r\nclass FileManagerPlugin {\r\n  \r\n  constructor(options) {\r\n    \r\n    this.options = this.setOptions(options);\r\n    this.isWin = /^win/.test(process.platform);\r\n\r\n    /* cpr options */\r\n    this.cprOptions = {\r\n      deleteFirst: true,\r\n      overwrite: true,\r\n      confirm: true \r\n    };\r\n    \r\n  }\r\n\r\n  setOptions(userOptions) {\r\n\r\n    const defaultOptions = {\r\n      verbose: false,\r\n      moveWithMkdirp: false,\r\n      onStart: {},\r\n      onEnd: {}\r\n    };\r\n\r\n    for (const key in defaultOptions) {\r\n      if (userOptions.hasOwnProperty(key)) {\r\n        defaultOptions[key] = userOptions[key];\r\n      }\r\n    }\r\n\r\n    return defaultOptions;\r\n\r\n  }\r\n\r\n  checkOptions(stage) {\r\n\r\n    if (this.options.verbose && Object.keys(this.options[stage]).length) {\r\n      console.log(`FileManagerPlugin: processing ${stage} event`);\r\n    }\r\n\r\n    let operationList = [];\r\n\r\n    if (this.options[stage] && Array.isArray(this.options[stage])) {\r\n      this.options[stage].map(opts => operationList.push(...this.parseFileOptions(opts, true)));\r\n    } else {\r\n      operationList.push(...this.parseFileOptions(this.options[stage]));\r\n    }\r\n\r\n    if(operationList.length) {\r\n\r\n      operationList.reduce((previous, fn) => {\r\n        return previous.then(retVal => fn(retVal));\r\n      }, Promise.resolve());\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  parseFileOptions(options, preserveOrder = false) {\r\n\r\n    const optKeys = Object.keys(options);\r\n\r\n    let commandOrder = [];\r\n\r\n    for (let i = 0; i < optKeys.length; i++) {\r\n\r\n      const fileAction = optKeys[i];\r\n      const fileOptions = options[fileAction];\r\n\r\n      switch (fileAction) {\r\n      \r\n        case 'copy':\r\n\r\n          for(let key in fileOptions) {\r\n\r\n            const command = fileOptions[key];\r\n\r\n            if (!command.source || !command.destination) {\r\n              if (this.options.verbose) {\r\n                console.log('  - FileManagerPlugin: Warning - copy parameter has to be formated as follows: { source: <string>, destination: <string> }');\r\n              }\r\n              return;\r\n            }\r\n\r\n            \r\n            commandOrder.push(() => new Promise((resolve, reject) => {\r\n\r\n              if (this.options.verbose) {\r\n                console.log(`  - FileManagerPlugin: Start copy source: ${command.source} to destination: ${command.destination}`)\r\n              }\r\n\r\n              cpr(command.source, command.destination, this.cprOptions, (err, files) => {\r\n                if (err && this.options.verbose) {\r\n                  console.log('  - FileManagerPlugin: Error - copy failed', err);\r\n                }\r\n                \r\n                if (this.options.verbose) {\r\n                  console.log(`  - FileManagerPlugin: Finished copy source: ${command.source} to destination: ${command.destination}`)\r\n                }\r\n\r\n                resolve(err);\r\n              \r\n              });\r\n\r\n            }));\r\n            \r\n          }          \r\n\r\n          break;\r\n        \r\n        \r\n        case 'move':\r\n\r\n          for(let key in fileOptions) {\r\n          \r\n            const command = fileOptions[key];\r\n\r\n            if (!command.source || !command.destination) {\r\n              if (this.options.verbose) {\r\n                console.log('  - FileManagerPlugin: Warning - move parameter has to be formated as follows: { source: <string>, destination: <string> }');\r\n              }\r\n              return;\r\n            }\r\n\r\n            commandOrder.push(() => new Promise((resolve, reject) => {\r\n              \r\n              if (this.options.verbose) {\r\n                console.log(`  - FileManagerPlugin: Start move source: ${command.source} to destination: ${command.destination}`)\r\n              }\r\n\r\n              mv(command.source, command.destination, { mkdirp: this.options.moveWithMkdirp }, (err) => {\r\n                if (err && this.options.verbose) {\r\n                  console.log('  - FileManagerPlugin: Error - move failed', err);\r\n                }\r\n                \r\n                if (this.options.verbose) {\r\n                  console.log(`  - FileManagerPlugin: Finished move source: ${command.source} to destination: ${command.destination}`)\r\n                }\r\n\r\n                resolve(err);\r\n              });\r\n            }));\r\n\r\n          }\r\n\r\n          break;\r\n\r\n        case 'delete':\r\n\r\n          for(let key in fileOptions) {\r\n\r\n            const path = fileOptions[key];\r\n\r\n            commandOrder.push(() => new Promise((resolve, reject) => {\r\n\r\n              if (this.options.verbose) {\r\n                console.log(`  - FileManagerPlugin: Starting delete path ${path}`)\r\n              }\r\n              \r\n              if (typeof path !== 'string') {\r\n                if (this.options.verbose) {\r\n                  console.log('  - FileManagerPlugin: Warning - delete parameter has to be type of string. Process canceled.');\r\n                }\r\n                return;\r\n              }\r\n\r\n              rimraf(path, { }, (response) => {\r\n                if (this.options.verbose && response === null) {\r\n                  console.log(`  - FileManagerPlugin: Finished delete path ${path}`)\r\n                }\r\n                resolve();\r\n              });\r\n\r\n            }));\r\n\r\n          }\r\n\r\n          break;\r\n          \r\n        case 'mkdir':\r\n        \r\n          for(let key in fileOptions) {\r\n            \r\n            const path = fileOptions[key];\r\n            \r\n            if (this.options.verbose) {\r\n              console.log(`  - FileManagerPlugin: Creating path ${path}`)\r\n            }\r\n            \r\n            if (typeof path !== 'string') {\r\n              if (this.options.verbose) {\r\n                console.log('  - FileManagerPlugin: Warning - mkdir parameter has to be type of string. Process canceled.');\r\n              }\r\n              return;\r\n            }\r\n            \r\n            commandOrder.push(() => makeDir(path));\r\n          }\r\n\r\n          break;\r\n\r\n        default: \r\n          break;\r\n\r\n      }\r\n\r\n    }\r\n \r\n    return commandOrder;\r\n\r\n  }\r\n\r\n\r\n  apply(compiler) {\r\n\r\n    compiler.plugin(\"compilation\", (comp) => {\r\n\r\n      this.checkOptions(\"onStart\");\r\n\r\n    });\r\n\r\n    compiler.plugin('after-emit', (compliation, callback) => {\r\n\r\n      this.checkOptions(\"onEnd\");\r\n\r\n      callback();\r\n   \r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default FileManagerPlugin;\r\n"],"names":["cpr","require","rimraf","mv","makeDir","FileManagerPlugin","options","setOptions","isWin","test","process","platform","cprOptions","userOptions","defaultOptions","key","hasOwnProperty","stage","verbose","Object","keys","length","log","operationList","Array","isArray","map","push","parseFileOptions","opts","reduce","previous","fn","then","retVal","Promise","resolve","optKeys","commandOrder","i","fileAction","fileOptions","command","source","destination","reject","err","files","mkdirp","moveWithMkdirp","path","response","compiler","plugin","comp","checkOptions","compliation","callback"],"mappings":"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"}