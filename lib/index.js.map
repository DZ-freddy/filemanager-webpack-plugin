{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const cpx = require('cpx');\nconst fs = require('fs');\nconst path = require('path');\nconst fsExtra = require('fs-extra')\nconst rimraf = require('rimraf');\nconst mv = require('mv');\nconst makeDir = require('make-dir');\n\nclass FileManagerPlugin {\n  \n  constructor(options) {\n    \n    this.options = this.setOptions(options);\n    this.isWin = /^win/.test(process.platform);\n\n    /* cpx options */\n    this.cpxOptions = {\n      clean: false,\n      includeEmptyDirs: true,\n      update: false \n    };\n    \n  }\n\n  setOptions(userOptions) {\n\n    const defaultOptions = {\n      verbose: false,\n      moveWithMkdirp: false,\n      onStart: {},\n      onEnd: {}\n    };\n\n    for (const key in defaultOptions) {\n      if (userOptions.hasOwnProperty(key)) {\n        defaultOptions[key] = userOptions[key];\n      }\n    }\n\n    return defaultOptions;\n\n  }\n\n  checkOptions(stage) {\n\n    if (this.options.verbose && Object.keys(this.options[stage]).length) {\n      console.log(`FileManagerPlugin: processing ${stage} event`);\n    }\n\n    let operationList = [];\n\n    if (this.options[stage] && Array.isArray(this.options[stage])) {\n      this.options[stage].map(opts => operationList.push(...this.parseFileOptions(opts, true)));\n    } else {\n      operationList.push(...this.parseFileOptions(this.options[stage]));\n    }\n\n    if(operationList.length) {\n\n      operationList.reduce((previous, fn) => {\n        return previous.then(retVal => fn(retVal));\n      }, Promise.resolve());\n\n    }\n\n\n  }\n\n  copyDirectory(source, destination, resolve, reject) {\n  \n    if (this.options.verbose) {\n      console.log(`  - FileManagerPlugin: Start copy source file: ${source} to destination file: ${destination}`);\n    }\n\n    cpx.copy(source, destination, this.cpxOptions, (err) => {\n      if (err && this.options.verbose) {\n        console.log('  - FileManagerPlugin: Error - copy failed', err);\n        reject(err);\n      }\n      \n      if (this.options.verbose) {\n        console.log(`  - FileManagerPlugin: Finished copy source: ${source} to destination: ${destination}`)\n      }\n\n      resolve();\n    \n    });\n\n  }\n\n  parseFileOptions(options, preserveOrder = false) {\n\n    const optKeys = Object.keys(options);\n\n    let commandOrder = [];\n\n    for (let i = 0; i < optKeys.length; i++) {\n\n      const fileAction = optKeys[i];\n      const fileOptions = options[fileAction];\n\n      switch (fileAction) {\n      \n        case 'copy':\n\n          for(let key in fileOptions) {\n\n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination) {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - copy parameter has to be formated as follows: { source: <string>, destination: <string> }');\n              }\n              return;\n            }\n            \n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              // if source is a file, just copyFile()\n              // if source is a NOT a glob pattern, simply append **/*\n              const fileRegex = /(\\*|\\{+|\\}+)/g;\n              const matches = fileRegex.exec(command.source);\n\n              if (matches === null) {            \n\n                fs.lstat(command.source, (sErr, sStats) => {\n\n                  fs.lstat(command.destination, (dErr, dStats) => {\n\n                    if(sStats.isFile()) {\n\n                      const destination = dStats && dStats.isDirectory() \n                        ? command.destination + \"/\" + path.basename(command.source)\n                        : command.destination;\n\n                      if (this.options.verbose) {\n                        console.log(`  - FileManagerPlugin: Start copy source: ${command.source} to destination: ${destination}`);\n                      }\n\n                      fsExtra.copy(command.source, destination, (err) => {\n                        \n                        if (err) \n                          reject(err);\n                        \n                        resolve();\n                      \n                      });\n\n                    } else {\n\n                      const sourceDir = command.source + ((command.source.substr(-1) !== \"/\") ? \"/\" : \"\") + \"**/*\";\n                      this.copyDirectory(sourceDir, command.destination, resolve, reject);\n             \n                    }\n\n                  });\n\n                });\n\n              } else {\n              \n                this.copyDirectory(command.source, command.destination, resolve, reject);\n\n              }\n\n            }));\n            \n          }          \n\n          break;\n        \n        \n        case 'move':\n\n          for(let key in fileOptions) {\n          \n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination) {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - move parameter has to be formated as follows: { source: <string>, destination: <string> }');\n              }\n              return;\n            }\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n              \n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Start move source: ${command.source} to destination: ${command.destination}`);\n              }\n\n              mv(command.source, command.destination, { mkdirp: this.options.moveWithMkdirp }, (err) => {\n                if (err) {\n                  if(this.options.verbose) {\n                    console.log('  - FileManagerPlugin: Error - move failed', err);\n                  }\n                  reject(err);\n                }\n                \n                if (this.options.verbose) {\n                  console.log(`  - FileManagerPlugin: Finished move source: ${command.source} to destination: ${command.destination}`);\n                }\n\n                resolve();\n              });\n            }));\n\n          }\n\n          break;\n\n        case 'delete':\n\n          for(let key in fileOptions) {\n\n            const path = fileOptions[key];\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Starting delete path ${path}`)\n              }\n              \n              if (typeof path !== 'string') {\n                if (this.options.verbose) {\n                  console.log('  - FileManagerPlugin: Warning - delete parameter has to be type of string. Process canceled.');\n                }\n                reject();\n              }\n\n              rimraf(path, { }, (response) => {\n                if (this.options.verbose && response === null) {\n                  console.log(`  - FileManagerPlugin: Finished delete path ${path}`)\n                }\n                resolve();\n              });\n\n            }));\n\n          }\n\n          break;\n          \n        case 'mkdir':\n        \n          for(let key in fileOptions) {\n            \n            const path = fileOptions[key];\n            \n            if (this.options.verbose) {\n              console.log(`  - FileManagerPlugin: Creating path ${path}`)\n            }\n            \n            if (typeof path !== 'string') {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - mkdir parameter has to be type of string. Process canceled.');\n              }\n              return;\n            }\n            \n            commandOrder.push(() => makeDir(path));\n          }\n\n          break;\n\n        default: \n          break;\n\n      }\n\n    }\n \n    return commandOrder;\n\n  }\n\n\n  apply(compiler) {\n\n    compiler.plugin(\"compilation\", (comp) => {\n\n      this.checkOptions(\"onStart\");\n\n    });\n\n    compiler.plugin('after-emit', (compliation, callback) => {\n\n      this.checkOptions(\"onEnd\");\n\n      callback();\n   \n    });\n\n  }\n\n}\n\nexport default FileManagerPlugin;\n"],"names":["cpx","require","fs","path","fsExtra","rimraf","mv","makeDir","FileManagerPlugin","options","setOptions","isWin","test","process","platform","cpxOptions","userOptions","defaultOptions","key","hasOwnProperty","stage","verbose","Object","keys","length","log","operationList","Array","isArray","map","push","parseFileOptions","opts","reduce","previous","fn","then","retVal","Promise","resolve","source","destination","reject","copy","err","optKeys","commandOrder","i","fileAction","fileOptions","command","fileRegex","matches","exec","lstat","sErr","sStats","dErr","dStats","isFile","isDirectory","basename","sourceDir","substr","copyDirectory","mkdirp","moveWithMkdirp","response","compiler","plugin","comp","checkOptions","compliation","callback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,UAAUH,QAAQ,UAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,KAAKL,QAAQ,IAAR,CAAX;AACA,IAAMM,UAAUN,QAAQ,UAAR,CAAhB;;IAEMO;6BAEQC,OAAZ,EAAqB;;;;SAEdA,OAAL,GAAe,KAAKC,UAAL,CAAgBD,OAAhB,CAAf;SACKE,KAAL,GAAa,OAAOC,IAAP,CAAYC,QAAQC,QAApB,CAAb;;;SAGKC,UAAL,GAAkB;aACT,KADS;wBAEE,IAFF;cAGR;KAHV;;;;;+BAQSC,aAAa;;UAEhBC,iBAAiB;iBACZ,KADY;wBAEL,KAFK;iBAGZ,EAHY;eAId;OAJT;;WAOK,IAAMC,GAAX,IAAkBD,cAAlB,EAAkC;YAC5BD,YAAYG,cAAZ,CAA2BD,GAA3B,CAAJ,EAAqC;yBACpBA,GAAf,IAAsBF,YAAYE,GAAZ,CAAtB;;;;aAIGD,cAAP;;;;iCAIWG,OAAO;;;UAEd,KAAKX,OAAL,CAAaY,OAAb,IAAwBC,OAAOC,IAAP,CAAY,KAAKd,OAAL,CAAaW,KAAb,CAAZ,EAAiCI,MAA7D,EAAqE;gBAC3DC,GAAR,oCAA6CL,KAA7C;;;UAGEM,gBAAgB,EAApB;;UAEI,KAAKjB,OAAL,CAAaW,KAAb,KAAuBO,MAAMC,OAAN,CAAc,KAAKnB,OAAL,CAAaW,KAAb,CAAd,CAA3B,EAA+D;aACxDX,OAAL,CAAaW,KAAb,EAAoBS,GAApB,CAAwB;iBAAQH,cAAcI,IAAd,wCAAsB,MAAKC,gBAAL,CAAsBC,IAAtB,EAA4B,IAA5B,CAAtB,EAAR;SAAxB;OADF,MAEO;sBACSF,IAAd,wCAAsB,KAAKC,gBAAL,CAAsB,KAAKtB,OAAL,CAAaW,KAAb,CAAtB,CAAtB;;;UAGCM,cAAcF,MAAjB,EAAyB;;sBAETS,MAAd,CAAqB,UAACC,QAAD,EAAWC,EAAX,EAAkB;iBAC9BD,SAASE,IAAT,CAAc;mBAAUD,GAAGE,MAAH,CAAV;WAAd,CAAP;SADF,EAEGC,QAAQC,OAAR,EAFH;;;;;kCASUC,QAAQC,aAAaF,SAASG,QAAQ;;;UAE9C,KAAKjC,OAAL,CAAaY,OAAjB,EAA0B;gBAChBI,GAAR,qDAA8De,MAA9D,8BAA6FC,WAA7F;;;UAGEE,IAAJ,CAASH,MAAT,EAAiBC,WAAjB,EAA8B,KAAK1B,UAAnC,EAA+C,UAAC6B,GAAD,EAAS;YAClDA,OAAO,OAAKnC,OAAL,CAAaY,OAAxB,EAAiC;kBACvBI,GAAR,CAAY,4CAAZ,EAA0DmB,GAA1D;iBACOA,GAAP;;;YAGE,OAAKnC,OAAL,CAAaY,OAAjB,EAA0B;kBAChBI,GAAR,mDAA4De,MAA5D,yBAAsFC,WAAtF;;;;OAPJ;;;;qCAgBehC,SAAgC;;;UAEzCoC,UAAUvB,OAAOC,IAAP,CAAYd,OAAZ,CAAhB;;UAEIqC,eAAe,EAAnB;;WAEK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,QAAQrB,MAA5B,EAAoCuB,GAApC,EAAyC;;YAEjCC,aAAaH,QAAQE,CAAR,CAAnB;YACME,cAAcxC,QAAQuC,UAAR,CAApB;;gBAEQA,UAAR;;eAEO,MAAL;uCAEU9B,GAFV;;kBAIUgC,UAAUD,YAAY/B,GAAZ,CAAhB;;kBAEI,CAACgC,QAAQV,MAAT,IAAmB,CAACU,QAAQT,WAAhC,EAA6C;oBACvC,OAAKhC,OAAL,CAAaY,OAAjB,EAA0B;0BAChBI,GAAR,CAAY,4HAAZ;;;;;;;2BAKSK,IAAb,CAAkB;uBAAM,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;;;;sBAIjDS,YAAY,eAAlB;sBACMC,UAAUD,UAAUE,IAAV,CAAeH,QAAQV,MAAvB,CAAhB;;sBAEIY,YAAY,IAAhB,EAAsB;;uBAEjBE,KAAH,CAASJ,QAAQV,MAAjB,EAAyB,UAACe,IAAD,EAAOC,MAAP,EAAkB;;yBAEtCF,KAAH,CAASJ,QAAQT,WAAjB,EAA8B,UAACgB,IAAD,EAAOC,MAAP,EAAkB;;4BAE3CF,OAAOG,MAAP,EAAH,EAAoB;;8BAEZlB,cAAciB,UAAUA,OAAOE,WAAP,EAAV,GAChBV,QAAQT,WAAR,GAAsB,GAAtB,GAA4BtC,KAAK0D,QAAL,CAAcX,QAAQV,MAAtB,CADZ,GAEhBU,QAAQT,WAFZ;;8BAII,OAAKhC,OAAL,CAAaY,OAAjB,EAA0B;oCAChBI,GAAR,gDAAyDyB,QAAQV,MAAjE,yBAA2FC,WAA3F;;;kCAGME,IAAR,CAAaO,QAAQV,MAArB,EAA6BC,WAA7B,EAA0C,UAACG,GAAD,EAAS;;gCAE7CA,GAAJ,EACEF,OAAOE,GAAP;;;2BAHJ;yBAVF,MAmBO;;8BAECkB,YAAYZ,QAAQV,MAAR,IAAmBU,QAAQV,MAAR,CAAeuB,MAAf,CAAsB,CAAC,CAAvB,MAA8B,GAA/B,GAAsC,GAAtC,GAA4C,EAA9D,IAAoE,MAAtF;iCACKC,aAAL,CAAmBF,SAAnB,EAA8BZ,QAAQT,WAAtC,EAAmDF,OAAnD,EAA4DG,MAA5D;;uBAxBJ;qBAFF;mBAFF,MAoCO;;2BAEAsB,aAAL,CAAmBd,QAAQV,MAA3B,EAAmCU,QAAQT,WAA3C,EAAwDF,OAAxD,EAAiEG,MAAjE;;iBA7CoB,CAAN;eAAlB;;;iBAXE,IAAIxB,GAAR,IAAe+B,WAAf,EAA4B;+BAApB/B,GAAoB;;;;;;;eAmEzB,MAAL;yCAEUA,GAFV;;kBAIUgC,UAAUD,YAAY/B,GAAZ,CAAhB;;kBAEI,CAACgC,QAAQV,MAAT,IAAmB,CAACU,QAAQT,WAAhC,EAA6C;oBACvC,OAAKhC,OAAL,CAAaY,OAAjB,EAA0B;0BAChBI,GAAR,CAAY,4HAAZ;;;;;;;2BAKSK,IAAb,CAAkB;uBAAM,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;;sBAEnD,OAAKjC,OAAL,CAAaY,OAAjB,EAA0B;4BAChBI,GAAR,gDAAyDyB,QAAQV,MAAjE,yBAA2FU,QAAQT,WAAnG;;;qBAGCS,QAAQV,MAAX,EAAmBU,QAAQT,WAA3B,EAAwC,EAAEwB,QAAQ,OAAKxD,OAAL,CAAayD,cAAvB,EAAxC,EAAiF,UAACtB,GAAD,EAAS;wBACpFA,GAAJ,EAAS;0BACJ,OAAKnC,OAAL,CAAaY,OAAhB,EAAyB;gCACfI,GAAR,CAAY,4CAAZ,EAA0DmB,GAA1D;;6BAEKA,GAAP;;;wBAGE,OAAKnC,OAAL,CAAaY,OAAjB,EAA0B;8BAChBI,GAAR,mDAA4DyB,QAAQV,MAApE,yBAA8FU,QAAQT,WAAtG;;;;mBATJ;iBANsB,CAAN;eAAlB;;;iBAXE,IAAIvB,GAAR,IAAe+B,WAAf,EAA4B;iCAApB/B,GAAoB;;;;;;;eAqCzB,QAAL;yCAEUA,GAFV;;kBAIUf,OAAO8C,YAAY/B,GAAZ,CAAb;;2BAEaY,IAAb,CAAkB;uBAAM,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;;sBAEnD,OAAKjC,OAAL,CAAaY,OAAjB,EAA0B;4BAChBI,GAAR,kDAA2DtB,IAA3D;;;sBAGE,OAAOA,IAAP,KAAgB,QAApB,EAA8B;wBACxB,OAAKM,OAAL,CAAaY,OAAjB,EAA0B;8BAChBI,GAAR,CAAY,+FAAZ;;;;;yBAKGtB,IAAP,EAAa,EAAb,EAAkB,UAACgE,QAAD,EAAc;wBAC1B,OAAK1D,OAAL,CAAaY,OAAb,IAAwB8C,aAAa,IAAzC,EAA+C;8BACrC1C,GAAR,kDAA2DtB,IAA3D;;;mBAFJ;iBAbsB,CAAN;eAAlB;;;iBAJE,IAAIe,GAAR,IAAe+B,WAAf,EAA4B;qBAApB/B,GAAoB;;;;;eA8BzB,OAAL;yCAEUA,GAFV;;kBAIUf,OAAO8C,YAAY/B,GAAZ,CAAb;;kBAEI,OAAKT,OAAL,CAAaY,OAAjB,EAA0B;wBAChBI,GAAR,2CAAoDtB,IAApD;;;kBAGE,OAAOA,IAAP,KAAgB,QAApB,EAA8B;oBACxB,OAAKM,OAAL,CAAaY,OAAjB,EAA0B;0BAChBI,GAAR,CAAY,8FAAZ;;;;;;;2BAKSK,IAAb,CAAkB;uBAAMvB,QAAQJ,IAAR,CAAN;eAAlB;;;iBAfE,IAAIe,GAAR,IAAe+B,WAAf,EAA4B;iCAApB/B,GAAoB;;;;;;;;;;;;;aA2B3B4B,YAAP;;;;0BAKIsB,UAAU;;;eAELC,MAAT,CAAgB,aAAhB,EAA+B,UAACC,IAAD,EAAU;;eAElCC,YAAL,CAAkB,SAAlB;OAFF;;eAMSF,MAAT,CAAgB,YAAhB,EAA8B,UAACG,WAAD,EAAcC,QAAd,EAA2B;;eAElDF,YAAL,CAAkB,OAAlB;;;OAFF;;;;;;;;"}