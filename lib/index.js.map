{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const cpx = require('cpx');\nconst fs = require('fs');\nconst rimraf = require('rimraf');\nconst mv = require('mv');\nconst makeDir = require('make-dir');\n\nclass FileManagerPlugin {\n  \n  constructor(options) {\n    \n    this.options = this.setOptions(options);\n    this.isWin = /^win/.test(process.platform);\n\n    /* cpx options */\n    this.cpxOptions = {\n      clean: false,\n      includeEmptyDirs: true,\n      update: false \n    };\n    \n  }\n\n  setOptions(userOptions) {\n\n    const defaultOptions = {\n      verbose: false,\n      moveWithMkdirp: false,\n      onStart: {},\n      onEnd: {}\n    };\n\n    for (const key in defaultOptions) {\n      if (userOptions.hasOwnProperty(key)) {\n        defaultOptions[key] = userOptions[key];\n      }\n    }\n\n    return defaultOptions;\n\n  }\n\n  checkOptions(stage) {\n\n    if (this.options.verbose && Object.keys(this.options[stage]).length) {\n      console.log(`FileManagerPlugin: processing ${stage} event`);\n    }\n\n    let operationList = [];\n\n    if (this.options[stage] && Array.isArray(this.options[stage])) {\n      this.options[stage].map(opts => operationList.push(...this.parseFileOptions(opts, true)));\n    } else {\n      operationList.push(...this.parseFileOptions(this.options[stage]));\n    }\n\n    if(operationList.length) {\n\n      operationList.reduce((previous, fn) => {\n        return previous.then(retVal => fn(retVal));\n      }, Promise.resolve());\n\n    }\n\n\n  }\n\n  copyDirectory(source, destination, resolve, reject) {\n      \n    console.log(source, destination);\n    cpx.copy(source, destination, this.cpxOptions, (err) => {\n      if (err && this.options.verbose) {\n        console.log('  - FileManagerPlugin: Error - copy failed', err);\n        reject(err);\n      }\n      \n      if (this.options.verbose) {\n        console.log(`  - FileManagerPlugin: Finished copy source: ${sourceDir} to destination: ${command.destination}`)\n      }\n\n      resolve();\n    \n    });\n\n  }\n\n  parseFileOptions(options, preserveOrder = false) {\n\n    const optKeys = Object.keys(options);\n\n    let commandOrder = [];\n\n    for (let i = 0; i < optKeys.length; i++) {\n\n      const fileAction = optKeys[i];\n      const fileOptions = options[fileAction];\n\n      switch (fileAction) {\n      \n        case 'copy':\n\n          for(let key in fileOptions) {\n\n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination) {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - copy parameter has to be formated as follows: { source: <string>, destination: <string> }');\n              }\n              return;\n            }\n            \n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              // if source is a file, just copyFile()\n              // if source is a NOT a glob pattern, simply append **/*\n              if (!command.source.includes(\"*\")) {            \n\n                fs.lstat(command.source, (err, stats) => {\n                  \n                  if (this.options.verbose) {\n                    console.log(`  - FileManagerPlugin: Start copy source: ${sourceDir} to destination: ${command.destination}`)\n                  }\n\n                  if(stats.isFile()) {\n\n                    fs.copyFile(command.source, command.destination, (err) => {\n                      if (err && this.options.verbose) {\n                        console.log(`  - FileManagerPlugin: Start copy source file: ${command.source} to destination file: ${command.destination}`)\n                      }\n                      resolve(err)\n                    });\n\n                  } else {\n\n                    let sourceDir = command.source;\n                    sourceDir += ((sourceDir.substr(-1) !== \"/\") ? \"/\" : \"\") + \"**/*\";\n\n                    this.copyDirectory(sourceDir, command.destination, resolve, reject);\n           \n                  }\n\n                });\n\n              } else {\n     \n                this.copyDirectory(command.source, command.destination, resolve, reject);\n\n              }\n\n            }));\n            \n          }          \n\n          break;\n        \n        \n        case 'move':\n\n          for(let key in fileOptions) {\n          \n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination) {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - move parameter has to be formated as follows: { source: <string>, destination: <string> }');\n              }\n              return;\n            }\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n              \n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Start move source: ${command.source} to destination: ${command.destination}`)\n              }\n\n              mv(command.source, command.destination, { mkdirp: this.options.moveWithMkdirp }, (err) => {\n                if (err && this.options.verbose) {\n                  console.log('  - FileManagerPlugin: Error - move failed', err);\n                  reject(err);\n                }\n                \n                if (this.options.verbose) {\n                  console.log(`  - FileManagerPlugin: Finished move source: ${command.source} to destination: ${command.destination}`)\n                }\n\n                resolve();\n              });\n            }));\n\n          }\n\n          break;\n\n        case 'delete':\n\n          for(let key in fileOptions) {\n\n            const path = fileOptions[key];\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Starting delete path ${path}`)\n              }\n              \n              if (typeof path !== 'string') {\n                if (this.options.verbose) {\n                  console.log('  - FileManagerPlugin: Warning - delete parameter has to be type of string. Process canceled.');\n                }\n                reject();\n              }\n\n              rimraf(path, { }, (response) => {\n                if (this.options.verbose && response === null) {\n                  console.log(`  - FileManagerPlugin: Finished delete path ${path}`)\n                }\n                resolve();\n              });\n\n            }));\n\n          }\n\n          break;\n          \n        case 'mkdir':\n        \n          for(let key in fileOptions) {\n            \n            const path = fileOptions[key];\n            \n            if (this.options.verbose) {\n              console.log(`  - FileManagerPlugin: Creating path ${path}`)\n            }\n            \n            if (typeof path !== 'string') {\n              if (this.options.verbose) {\n                console.log('  - FileManagerPlugin: Warning - mkdir parameter has to be type of string. Process canceled.');\n              }\n              return;\n            }\n            \n            commandOrder.push(() => makeDir(path));\n          }\n\n          break;\n\n        default: \n          break;\n\n      }\n\n    }\n \n    return commandOrder;\n\n  }\n\n\n  apply(compiler) {\n\n    compiler.plugin(\"compilation\", (comp) => {\n\n      this.checkOptions(\"onStart\");\n\n    });\n\n    compiler.plugin('after-emit', (compliation, callback) => {\n\n      this.checkOptions(\"onEnd\");\n\n      callback();\n   \n    });\n\n  }\n\n}\n\nexport default FileManagerPlugin;\n"],"names":["cpx","require","fs","rimraf","mv","makeDir","FileManagerPlugin","options","setOptions","isWin","test","process","platform","cpxOptions","userOptions","defaultOptions","key","hasOwnProperty","stage","verbose","Object","keys","length","log","operationList","Array","isArray","map","push","parseFileOptions","opts","reduce","previous","fn","then","retVal","Promise","resolve","source","destination","reject","copy","err","sourceDir","command","optKeys","commandOrder","i","fileAction","fileOptions","includes","lstat","stats","isFile","copyFile","substr","copyDirectory","mkdirp","moveWithMkdirp","path","response","compiler","plugin","comp","checkOptions","compliation","callback"],"mappings":"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"}