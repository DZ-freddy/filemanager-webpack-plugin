{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const cpr = require('cpr');\nconst rimraf = require('rimraf');\nconst mv = require('mv');\n\nclass FileManagerPlugin {\n  \n  constructor(options) {\n    \n    this.options = this.setOptions(options);\n    this.isWin = /^win/.test(process.platform);\n\n    /* cpr options */\n    this.cprOptions = {\n      deleteFirst: true,\n      overwrite: true,\n      confirm: true \n    };\n    \n  }\n\n  setOptions(userOptions) {\n\n    const defaultOptions = {\n      verbose: false,\n      onStart: {},\n      onEnd: {}\n    };\n\n    for (const key in defaultOptions) {\n      if (userOptions.hasOwnProperty(key)) {\n        defaultOptions[key] = userOptions[key];\n      }\n    }\n\n    return defaultOptions;\n\n  }\n\n  checkOptions(stage) {\n\n    if (this.options.verbose && Object.keys(this.options[stage]).length) {\n      console.log(`FileManagerPlugin: processing ${stage} event`);\n    }\n\n    let operationList = [];\n\n    if (this.options[stage] && Array.isArray(this.options[stage])) {\n      this.options[stage].map(opts => operationList.push(...this.parseFileOptions(opts, true)));\n    } else {\n      operationList.push(...this.parseFileOptions(this.options[stage]));\n    }\n\n    if(operationList.length) {\n\n      operationList.reduce((previous, fn) => {\n        return previous.then(retVal => fn(retVal));\n      }, Promise.resolve());\n\n    }\n\n\n  }\n\n  parseFileOptions(options, preserveOrder = false) {\n\n    const optKeys = Object.keys(options);\n\n    let commandOrder = [];\n\n    for (let i = 0; i < optKeys.length; i++) {\n\n      const fileAction = optKeys[i];\n      const fileOptions = options[fileAction];\n\n      switch (fileAction) {\n      \n        case 'copy':\n\n          for(let key in fileOptions) {\n\n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination)\n              return;\n\n            \n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Start copy source: ${command.source} to destination: ${command.destination}`)\n              }\n\n              cpr(command.source, command.destination, this.cprOptions, (err, files) => {\n                \n                if (this.options.verbose) {\n                  console.log(`  - FileManagerPlugin: Finished copy source: ${command.source} to destination: ${command.destination}`)\n                }\n\n                resolve(err);\n              \n              });\n\n            }));\n            \n          }          \n\n          break;\n        \n        \n        case 'move':\n\n          for(let key in fileOptions) {\n          \n            const command = fileOptions[key];\n\n            if (!command.source || !command.destination)\n              return;\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n              mv(command.source, command.destination, (err) => {\n                resolve(err);\n              });\n            }));\n\n          }\n\n          break;\n\n        case 'delete':\n\n          for(let key in fileOptions) {\n\n            const path = fileOptions[key];\n\n            commandOrder.push(() => new Promise((resolve, reject) => {\n\n              if (this.options.verbose) {\n                console.log(`  - FileManagerPlugin: Starting delete path ${path}`)\n              }\n\n              rimraf(path, { }, (response) => {\n                if (this.options.verbose && response === null) {\n                  console.log(`  - FileManagerPlugin: Finished delete path ${path}`)\n                }\n                resolve();\n              });\n\n            }));\n\n          }\n\n          break;\n\n        default: \n          break;\n\n      }\n\n    }\n \n    return commandOrder;\n\n  }\n\n\n  apply(compiler) {\n\n    compiler.plugin(\"compilation\", (comp) => {\n\n      this.checkOptions(\"onStart\");\n\n    });\n\n    compiler.plugin('after-emit', (compliation, callback) => {\n\n      this.checkOptions(\"onEnd\");\n\n      callback();\n   \n    });\n\n  }\n\n}\n\nexport default FileManagerPlugin;\n"],"names":["cpr","require","rimraf","mv","FileManagerPlugin","options","setOptions","isWin","test","process","platform","cprOptions","userOptions","defaultOptions","key","hasOwnProperty","stage","verbose","Object","keys","length","log","operationList","Array","isArray","map","push","parseFileOptions","opts","reduce","previous","fn","then","retVal","Promise","resolve","optKeys","commandOrder","i","fileAction","fileOptions","command","source","destination","reject","err","files","path","response","compiler","plugin","comp","checkOptions","compliation","callback"],"mappings":"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"}